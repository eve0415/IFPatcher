buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'net.kyori.blossom' version "1.1.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'

import net.minecraftforge.gradle.common.task.SignJar
import groovy.json.JsonSlurper                       
import groovy.json.JsonOutput

version = '1.1.0a'
group = 'net.eve0415.minecraft'
archivesBaseName = 'IFPatcher'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: '20180814-1.12'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            jvmArg '-Dfml.coreMods.load=net.eve0415.ifpatcher.IFPatcher'
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            jvmArg '-Dfml.coreMods.load=net.eve0415.ifpatcher.IFPatcher'
        }
    }
}

repositories {
    maven { url 'https://www.cursemaven.com' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2854'

    compile "curse.maven:industrialforegoing-266515:2745321"
    compile "curse.maven:teslacorelib-254602:2891841"
}

Properties properties = new Properties()
properties.load(project.rootProject.file('secret.properties').newDataInputStream())
def keyStore = properties.getProperty('keyStore')
def keyStoreAlias = properties.getProperty('keyStoreAlias')
def keyStorePass = properties.getProperty('keyStorePass')
def keyStoreKeyPass = properties.getProperty('keyStoreKeyPass')
def signSHA1 = properties.getProperty('signSHA1')

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		expand 'version': project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

blossom {
    replaceTokenIn('src/main/java/net/eve0415/ifpatcher/Reference.java')
    replaceToken '@VERSION@', version
    replaceToken '@FINGERPRINT@', signSHA1
}

compileJava {
    options.compilerArgs += [
            '-Xlint:-processing',
            '-proc:none'
    ]
    options.encoding = 'utf8'
}

jar {
    manifest {
        attributes([
            "Specification-Title": "IFPatcher",
            "Specification-Vendor": "eve0415",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"eve0415",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "FMLCorePlugin": "net.eve0415.ifpatcher.IFPatcher",
            "FMLCorePluginContainsFMLMod": "true",
        ])
    }
}

jar.finalizedBy('reobfJar') 

task signJar(type: SignJar, dependsOn: jar) {
    onlyIf {
        project.hasProperty('keyStore')
    }

    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

build.dependsOn signJar
